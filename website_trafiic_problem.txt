Web traffic analysis - We have an array of say 5 cities where we are tracking our everyday
web-site. You can put any 5 cities you like. In the future, we should be able to add more cities
to it. Under each city create about 100 visit entries. Each visit entry will be userId (Random
integer between 1 to 30), time of day (morning|noon|evening|night) picked randomly, and
timeSpentMinutes. We do not need the date of the visit as these entries are for one day. Once
the data is generated output the following
1. Time of day(morning|noon...) when the site has the most number of unique users
2. Which city uses the site most at which time of day e.g. Pune Morning 60 users
Hint: Reduction of one array into smaller arrays

# Problem 13 - web traffic for the five given city
# Note: Did not get enough time for this question 

import random

# Function to create a single record randomly
def returnrecord():
    timeofday = ['morning', 'noon', 'evening', 'night']
    userID = random.randint(1,30)
    timeday = random.choice(timeofday)
    timespent = random.randint(1,100)
    record = [userID, timeday, timespent]
    return record



cities_list =['Pune', 'Mumbai', 'Hyderabad', 'Delhi', 'Banglore']
timeofday = ['morning', 'noon', 'evening', 'night']

# These list will contain all the records in three attributes
# [1. (1-30)  - 2. timeofday, - 3. timespent]
pune_enteries = []
mumbai_enteries =[]
hyderabad_enteries =[]
delhi_enteries =[]
banglore_enteries =[]

#  To enter 100 enties randomly using a loop
for i in range(1,101):
    pune_enteries.append(returnrecord())
    mumbai_enteries.append(returnrecord())
    hyderabad_enteries.append(returnrecord())
    delhi_enteries.append(returnrecord())
    banglore_enteries.append(returnrecord())
    
# Using a dictionary to store all the entries as per the city name
cities_records ={'Pune':pune_enteries, 'Mumbai': mumbai_enteries, 'Hyderabad':hyderabad_enteries, 'Delhi' :delhi_enteries, 'Banglore': banglore_enteries}

# get_city = input("Enter the name of the city ")
# get_time = input("Enter the time at which the site is showed: ")

# Second condition to find city with hieghest traffic  
def find_city():
    count_records =[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]] 
    #for five cities
    for i in range(0,100):
        
        # For Pune
        if cities_records['Pune'][i][1] == "morning":
                count_records[0][0] = count_records[0][0] +1
        elif cities_records['Pune'][i][1] == "noon":
                count_records[0][1] = count_records[0][1] +1
        elif cities_records['Pune'][i][1] == "evening":
                count_records[0][2] = count_records[0][2] +1
        elif cities_records['Pune'][i][1] == "night":
                count_records[0][3] = count_records[0][3] +1
                
          
        # For Mumbai 
        if cities_records['Mumbai'][i][1] == "morning":
                count_records[1][0] = count_records[1][0] +1
        elif cities_records['Mumbai'][i][1] == "noon":
                count_records[1][1] = count_records[1][1] +1
        elif cities_records['Mumbai'][i][1] == "evening":
                count_records[1][2] = count_records[1][2] +1
        elif cities_records['Mumbai'][i][1] == "night":
                count_records[1][3] = count_records[1][3] +1
        
        # For Hyderabad 
        if cities_records['Hyderabad'][i][1] == "morning":
                count_records[2][0] = count_records[2][0] +1
        elif cities_records['Hyderabad'][i][1] == "noon":
                count_records[2][1] = count_records[2][1] +1
        elif cities_records['Hyderabad'][i][1] == "evening":
                count_records[2][2] = count_records[2][2] +1
        elif cities_records['Hyderabad'][i][1] == "night":
                count_records[2][3] = count_records[2][3] +1
            
         # For Delhi    
        if cities_records['Delhi'][i][1] == "morning":
                count_records[3][0] = count_records[3][0] +1
        elif cities_records['Delhi'][i][1] == "noon":
                count_records[3][1] = count_records[3][1] +1
        elif cities_records['Delhi'][i][1] == "evening":
                count_records[3][2] = count_records[3][2] +1
        elif cities_records['Delhi'][i][1] == "night":
                count_records[3][3] = count_records[3][3] +1
            
         # For Banglore    
        if cities_records['Banglore'][i][1] == "morning":
                count_records[4][0] = count_records[4][0] +1
        elif cities_records['Banglore'][i][1] == "noon":
                count_records[4][1] = count_records[4][1] +1
        elif cities_records['Banglore'][i][1] == "evening":
                count_records[4][2] = count_records[4][2] +1
        elif cities_records['Banglore'][i][1] == "night":
                count_records[4][3] = count_records[4][3] +1
                
    # Outside of for-loop but inside of the function
    max_i = -1
    max_j = -1
    max_num = 0
    for i in range(0,5):
        for j in range(0,4):
            if(max_num < count_records[i][j]):
                max_num = count_records[i][j]
                max_i = i;
                max_j = j;
                
    # To print the appropriate data
    cities_list =['Pune', 'Mumbai', 'Hyderabad', 'Delhi', 'Banglore']
    timeofday = ['morning', 'noon', 'evening', 'night']
    City_with_most_traffic = cities_list[max_i]
    time_with_most_traffic = timeofday[max_j]
    print("City from where the most traffic comes is: ", cities_list[max_i])
    print("Time of that city with most traffic is: ",timeofday[max_j])
    print("with a traffic of : ", max_num , "requests per-",timeofday[max_j])
    
    
    print("")
    for i in range(5):
        print("The city ", cities_list[i], "has : ", count_records[i])
    
    
# Call the function for removing the highest traffic time and place
find_city()
